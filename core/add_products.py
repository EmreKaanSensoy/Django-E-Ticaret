import os
import sys
import django
import requests
from PIL import Image
from io import BytesIO
import tempfile

# Django ayarlarƒ±nƒ± y√ºkle
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from AppTicaret.models import Product, Brand, Gender, Color, CaseShape, StrapType, GlassFeature, Style, Mechanism

def download_image(url, filename):
    """ƒ∞nternetten g√∂rsel indir"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        # G√∂rseli PIL ile a√ß ve kontrol et
        img = Image.open(BytesIO(response.content))
        
        # Ge√ßici dosya olu≈ütur
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        img.save(temp_file.name, 'JPEG')
        
        return temp_file.name
    except Exception as e:
        print(f"G√∂rsel indirme hatasƒ±: {e}")
        return None

def create_or_get_model(model_class, name_field, name_value):
    """Model olu≈ütur veya mevcut olanƒ± getir"""
    try:
        obj, created = model_class.objects.get_or_create(**{name_field: name_value})
        if created:
            print(f"Yeni {model_class.__name__} olu≈üturuldu: {name_value}")
        return obj
    except Exception as e:
        print(f"{model_class.__name__} olu≈üturma hatasƒ±: {e}")
        return None

def add_products():
    """√úr√ºnleri veritabanƒ±na ekle"""
    
    # √ñrnek √ºr√ºn verileri
    products_data = [
        {
            'brand': 'Rolex',
            'model': 'Submariner',
            'description': 'Klasik dalƒ±≈ü saati, su ge√ßirmez ve dayanƒ±klƒ±',
            'price': 85000,
            'gender': 'Erkek',
            'color': 'Siyah',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Metal',
            'glass_feature': 'Sapphire',
            'style': 'Spor',
            'mechanism': 'Otomatik',
            'image_url': 'https://images.unsplash.com/photo-1523170335258-f5ed11844a49?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Omega',
            'model': 'Speedmaster',
            'description': 'Ay y√ºr√ºy√º≈ü√ºnde kullanƒ±lan efsanevi kronograf',
            'price': 65000,
            'gender': 'Erkek',
            'color': 'Siyah',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Metal',
            'glass_feature': 'Sapphire',
            'style': 'Spor',
            'mechanism': 'Manuel',
            'image_url': 'https://images.unsplash.com/photo-1547996160-81dfa63595aa?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Cartier',
            'model': 'Tank',
            'description': 'Zarif ve klasik tasarƒ±m, l√ºks saat koleksiyonu',
            'price': 45000,
            'gender': 'Kadƒ±n',
            'color': 'Altƒ±n',
            'case_shape': 'Dikd√∂rtgen',
            'strap_type': 'Deri',
            'glass_feature': 'Mineral',
            'style': 'Klasik',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1524592094714-0f0654e20314?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Seiko',
            'model': 'Presage',
            'description': 'Japon kalitesi, otomatik mekanizma',
            'price': 8500,
            'gender': 'Erkek',
            'color': 'Mavi',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Deri',
            'glass_feature': 'Hardlex',
            'style': 'Klasik',
            'mechanism': 'Otomatik',
            'image_url': 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Tissot',
            'model': 'T-Touch',
            'description': 'Dokunmatik ekranlƒ± akƒ±llƒ± saat',
            'price': 12000,
            'gender': 'Erkek',
            'color': 'Gri',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Kau√ßuk',
            'glass_feature': 'Sapphire',
            'style': 'Spor',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1544117519-31a4b719223d?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Swatch',
            'model': 'Classic',
            'description': 'Renkli ve eƒülenceli tasarƒ±m',
            'price': 2500,
            'gender': 'Unisex',
            'color': 'Beyaz',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Plastik',
            'glass_feature': 'Mineral',
            'style': 'Casual',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Casio',
            'model': 'G-Shock',
            'description': 'Dayanƒ±klƒ± ve su ge√ßirmez spor saati',
            'price': 1800,
            'gender': 'Erkek',
            'color': 'Siyah',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Kau√ßuk',
            'glass_feature': 'Mineral',
            'style': 'Spor',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Fossil',
            'model': 'Grant',
            'description': 'Amerikan tarzƒ± klasik saat',
            'price': 3500,
            'gender': 'Erkek',
            'color': 'Kahverengi',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Deri',
            'glass_feature': 'Mineral',
            'style': 'Klasik',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1523170335258-f5ed11844a49?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Michael Kors',
            'model': 'Bradshaw',
            'description': '≈ûƒ±k ve modern kadƒ±n saati',
            'price': 4200,
            'gender': 'Kadƒ±n',
            'color': 'G√ºm√º≈ü',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Metal',
            'glass_feature': 'Mineral',
            'style': 'Modern',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1524592094714-0f0654e20314?w=500&h=500&fit=crop'
        },
        {
            'brand': 'Citizen',
            'model': 'Eco-Drive',
            'description': 'G√ºne≈ü enerjili √ßevre dostu saat',
            'price': 6800,
            'gender': 'Erkek',
            'color': 'Mavi',
            'case_shape': 'Yuvarlak',
            'strap_type': 'Metal',
            'glass_feature': 'Mineral',
            'style': 'Klasik',
            'mechanism': 'Quartz',
            'image_url': 'https://images.unsplash.com/photo-1547996160-81dfa63595aa?w=500&h=500&fit=crop'
        }
    ]
    
    print("√úr√ºn ekleme i≈ülemi ba≈ülƒ±yor...")
    
    for i, product_data in enumerate(products_data, 1):
        try:
            print(f"\n{i}. √úr√ºn ekleniyor: {product_data['brand']} {product_data['model']}")
            
            # Model nesnelerini olu≈ütur veya getir
            brand = create_or_get_model(Brand, 'brand', product_data['brand'])
            gender = create_or_get_model(Gender, 'gender', product_data['gender'])
            color = create_or_get_model(Color, 'color', product_data['color'])
            case_shape = create_or_get_model(CaseShape, 'case_shape', product_data['case_shape'])
            strap_type = create_or_get_model(StrapType, 'strap_type', product_data['strap_type'])
            glass_feature = create_or_get_model(GlassFeature, 'glass_feature', product_data['glass_feature'])
            style = create_or_get_model(Style, 'style', product_data['style'])
            mechanism = create_or_get_model(Mechanism, 'mechanism', product_data['mechanism'])
            
            if not all([brand, gender, color, case_shape, strap_type, glass_feature, style, mechanism]):
                print(f"Model olu≈üturma hatasƒ±, √ºr√ºn atlanƒ±yor: {product_data['brand']} {product_data['model']}")
                continue
            
            # G√∂rseli indir
            image_path = download_image(product_data['image_url'], f"{product_data['brand']}_{product_data['model']}.jpg")
            
            if not image_path:
                print(f"G√∂rsel indirme hatasƒ±, √ºr√ºn atlanƒ±yor: {product_data['brand']} {product_data['model']}")
                continue
            
            # √úr√ºn√º olu≈ütur
            product = Product.objects.create(
                brand=brand,
                model=product_data['model'],
                description=product_data['description'],
                price=product_data['price'],
                gender=gender,
                color=color,
                case_shape=case_shape,
                strap_type=strap_type,
                glass_feature=glass_feature,
                style=style,
                mechanism=mechanism
            )
            
            # G√∂rseli √ºr√ºne ekle
            with open(image_path, 'rb') as img_file:
                from django.core.files import File
                product.image.save(f"{product_data['brand']}_{product_data['model']}.jpg", File(img_file), save=True)
            
            # Ge√ßici dosyayƒ± sil
            os.unlink(image_path)
            
            print(f"‚úÖ Ba≈üarƒ±yla eklendi: {product_data['brand']} {product_data['model']} - {product_data['price']} ‚Ç∫")
            
        except Exception as e:
            print(f"‚ùå Hata: {product_data['brand']} {product_data['model']} - {e}")
            continue
    
    print(f"\nüéâ Toplam {len(products_data)} √ºr√ºn i≈ülendi!")
    print("√úr√ºn ekleme i≈ülemi tamamlandƒ±.")

if __name__ == '__main__':
    add_products() 